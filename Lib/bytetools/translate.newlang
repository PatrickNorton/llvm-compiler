export translate, maketrans, TranslateTable

const class TranslateTable {
    bytes keys
    bytes values

    operator new (bytes keys, bytes values) {
        assert isSorted(keys)
        self.keys = keys
        self.values = values
    }

    operator [] (int i) -> int {
        if binarySearch(self.keys)? as index {
            return self.values[index]
        } else {
            return i
        }
    }
}

func maketrans(bytes key, bytes value) -> TranslateTable {
    if newKey.length != newValue.length {
        raise ValueError("Translation key and value should be of the same length")
    }
    final var newKey = key[:]
    final var newValue = value[:]
    quicksort(newKey, newValue)
    return TranslateTable(newKey, newValue)
}

func translate(bytes data, TranslateTable translate) -> mut bytes {
    return bytes((translate[i] for var i in data))
}

func isSorted(bytes value) -> bool {
    mut var last = -1
    for var i in value {
        if i > last {
            last = i
        } else {
            return false
        }
    }
    return true
}

func quicksort(mut bytes toSort, mut bytes values) {
    qsInner(toSort, values, 0, toSort.length - 1)
}

func qsInner(mut bytes values, mut bytes other, int low, int high) {
    if low < high {
        int p = partition(values, low, high)
        qsInner(values, low, p - 1)
        qsInner(values, p + 1, high)
    }
}

func partition(mut bytes values, mut bytes other, int low, int high) -> int {
    var pivot = values[high]
    int i = low
    for int j in [low:high+1] {
        if values[j] < pivot {
            values[i], values[j] = values[j], values[i]
            other[i], other[j] = other[j], other[i]
            i++
        }
    }
    return i
}

func binarySearch(bytes value, int key) -> int? {
    assert key in [0:256]
    mut var size = value.length
    mut var left = 0
    mut var right = size
    while left < right {
        var mid = left + size / 2
        var midVal = value[mid]
        if key < midVal {
            left = mid + 1
        } else if key > midVal {
            right = mid
        } else {
            return mid
        }
        size = right - left
    }
    return null
}
