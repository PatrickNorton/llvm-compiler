from bytetools import maketrans, translate, TranslateTable

import itertools
import numtools

export b64encode, b64decode, standard_b64encode, standard_b64decode, urlsafe_b64encode, urlsafe_b64decode,
export b32encode, b32decode, b16encode, b16decode, b85encode, b85decode, a85encode, a85decode

func b64encode(bytes s, /, bytes? altchars = null) -> bytes {
    raise NotImplemented()
}

func b64decode(bytes s, /, bytes? altchars = null, bool validate = false) -> bytes {
    raise NotImplemented()
}

func standard_b64encode(bytes s, /) -> bytes {
    return b64encode(s)
}

func standard_b64decode(bytes s, /) -> bytes {
    return b64decode(s)
}

func urlsafe_b64encode(bytes s, /) -> bytes {
    static var encodeTranslation = maketrans(b'+/', b'-_')
    return translate(b64encode(s), encodeTranslation)
}

func urlsafe_b64decode(bytes s, /) -> bytes {
    static var decodeTranslation = maketrans(b'-_', b'+/')
    return translate(b64decode(s), decodeTranslation)
}

bytes B32_ALPHABET = b'ABCDEFGHIJKLMNOPQRSTUVWXYZ234567'

func makeB32Table() -> list[bytes] {
    var b32tab = [bytes([i]) for i in B32_ALPHABET]
    return [a + b for var i, var j in itertools.product(b32tab, b32tab)]
}

func b32encode(mref bytes s, /) -> bytes {
    static var b32tab2 = makeB32Table()
    var leftover = s.length % 5
    if leftover {
        s += b'\0' * (5 - leftover)
    }
    final var encoded = bytes()
    for var i in [0:s.length:5] {
        var c = numtools.fromBytes(s[i:i+5], 'big')
        encoded.add(b32tab2[c >> 30] +           # bits 1 - 10
                    b32tab2[(c >> 20) & 0x3ff] + # bits 11 - 20
                    b32tab2[(c >> 10) & 0x3ff] + # bits 21 - 30
                    b32tab2[c & 0x3ff]           # bits 31 - 40
                   )
    }
    switch leftover {
        case 1 {
            encoded[-6:] = b'======'
        }
        case 2 {
            encoded[-4:] = b'===='
        }
        case 3 {
            encoded[-3:] = b'==='
        }
        case 4 {
            encoded[-1:] = b'=='
        }
    }
    return encoded
}

func b32decode(bytes s, /, bool casefold = false, bytes? map01 = null) -> bytes {
    static var b32rev = {v: k for var k, var v in enumerate(B32_ALPHABET)}
    mref var s = bytesFromDecodeData(s)
    if s.length % 8 {
        raise NotImplemented("binascii.Error('Incorrect padding')")
    }
    if map01? as map {
        var mapBytes = bytesFromDecodeData(map01)
        assert mapBytes.length == 1 as repr(mapBytes)
        s = s.translate(maketrans(b'01', b'O' + map01))
    }
    if casefold {
        s = s.upper()
    }
    var l = s.length
    s = s.rtrim(y'=')
    var padchars = l - s.length
    final var decoded = bytes()
    mut var acc = 0
    for i in [0:s.length:8] {
        var quanta = s[i:i+8]
        acc = 0
        for var c in quanta {
            acc = (acc << 5) + (b32rev.get(i) ?? raise binascii.Error('Non-base32 digit found'))
        }
        decoded += numtools.toBytes(acc, 5, 'big')
    }
    if l % 8 or padchars not in {0, 1, 3, 4, 6} {
        raise binascii.Error("Incorrect padding")
    }
    if padchars and decoded {
        acc <<= 5 * padchars
        var last = numtools.toBytes(acc, 5, 'big')
        var leftover = (43 - 5 * padchars) // 8
        decoded[-5:] = last[:leftover]
    }
    return decoded
}

func b16encode(bytes s, /) -> bytes {
    raise NotImplemented()
}

func b16decode(bytes s, /, bool casefold = false) -> bytes {
    raise NotImplemented()
}

var A85START = b"<~"
var A85END = b"~>"

func n85encode(
    bytes by, list[bytes] chars, list[bytes] chars2, /,
    bool pad=false, bool foldNulls=false, bool foldSpaces=false
) -> mut bytes {
    mref var b = by
    let padding = (-b.length) % 4
    if padding {
        b += b'\0' * padding
    }
    var words = b""  # TODO: words = struct.Struct('!%dI' % (len(b) // 4)).unpack(b)
    final var chunks = [
        b'z' if foldNulls and not word else
        b'y' if foldSpaces and word == 0x20202020 else
        (chars2[word // 614125] +
             chars2[word // 85 % 7225] +
             chars[word % 85])
        for var word in words
    ]
    if padding and not pad {
        if chunks[-1] == b'z' {
            chunks[-1] = chars[0] * 5
        }
        chunks[-1] = chunks[-1][:padding]
    }
    return b''.join(chunks)
}

func a85encode(
    bytes b, /, *, bool foldspaces = false, int wrapcol = 0, bool pad = false, bool adobe = false
) -> bytes {
    static var a85chars = [bytes([i]) for var i in [33:118]]
    static var a85chars2 = [(a + b) for var a, var b in itertools.product(a85chars, a85chars)]

    mut var result = n85encode(b, a85chars, a85chars2, pad, true, foldspaces)

    if adobe {
        result = A85START + result
    }
    if wrapcol {
        var wrapcols = max(2 if adobe else 1, wrapcol)
        final var chunks = [result[i:i+wrapcols] for var i in [0:result.length:wrapcol]]
        if adobe and chunks.length + 2 > wrapcols {
            chunks.append(b"")
        }
        result = b"\n".join(chunks)
    }
    if adobe {
        result += A85END
    }
    return result
}

func a85decode(
    bytes by, /, *, bool foldspaces = false, bool adobe = false, bytes ignorechars = b' \t\n\r\v'
) -> bytes {
    mref var b = bytesFromDecodeData(by)
    if adobe {
        if not b.endsWith(A85END) {
            raise ValueError(f"Ascii85 encoded byte sequences must end with {A85END}")
        }
        if b.startsWith(A85START) {
            b = b[2:-2]
        } else {
            b = b[:-2]
        }
    }
    raise NotImplemented()
}

var B85ALPHABET = b"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz!#$%&()*+-;<=>?@^_`{|}~"

func b85encode(bytes b, /, bool pad=false) -> bytes {
    static var b85chars = [bytes([i]) for var i in B85ALPHABET]
    static var b85chars2 = [(a + b) for var a, var b in itertools.product(b85chars, b85chars)]
    return x85encode(b, b85chars, b85chars2, pad)
}

func b85decode(bytes by, /) -> bytes {
    static var b85dec = b85decInit()

    mref var b = bytesFromDecodeData(by)
    var padding = (-b.length) % 5
    b += b'~' * padding
    final list[bytes] out = []
    var packI = raise NotImplemented()
    for var i in [0:b.length:5] {
        var chunk = b[i:i+5]
        mut var acc = 0
        for var j, var c in enumerate(chunk) {
            acc = acc * 85 + (b85dec[c] ?? raise ValueError(f'Bad base85 character at position {i + j}'))
        }
        raise NotImplemented()
    }
    mref var result = b"".join(out)
    if padding {
        result = result[:-padding]
    }
    return result
}

func b85decInit() -> list[int?] {
    final list[int?] result = [null] * 256
    for var i, var c in enumerate(B85ALPHABET) {
        result[c] = i
    }
    return result
}

# TODO: Get math working so this can be imported

$inline
func max(int i, int j) -> int {
    return i if i > j else j
}
