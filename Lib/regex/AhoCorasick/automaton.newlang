from numtools import IntRef

from .ahocorasick import MatchKind
from .match import Match
from .prefilter import Prefilter, PrefilterState, next, Candidate

export Automaton

int FAIL_ID = 0
int DEAD_ID = 1

interface Automaton {
    public method matchKind() -> MatchKind

    public method anchored() -> bool

    public method prefilter() -> Prefilter?

    public method startState() -> int

    public method isValid(int idVal) -> bool

    public method isMatchState(int idVal) -> bool

    public method isMatchOrDeadState(int idVal) -> bool {
        return idVal == DEAD_ID or self.isMatchState(idVal)
    }

    public method getMatch(
        int idVal,
        int matchIndex,
        int end,
    ) -> Match?

    public method matchCount(int idVal) -> int

    public method nextState(int current, int inputVal) -> int

    public method nextStateNoFail(int current, int inputVal) -> int {
        var next = self.nextState(current, inputVal)
        assert next != FAIL_ID
        return next
    }

    public method standardFindAt(
        mut PrefilterState prestate,
        bytes haystack,
        int at,
        mut int stateId,
    ) -> Match? {
        if self.prefilter()? as pre {
            return self.standardFindAtImp(
                prestate,
                pre,
                haystack,
                at,
                stateId,
            )
        } else {
            return self.standardFindAtImp(prestate, null, haystack, at, stateId)
        }
    }

    public method standardFindAtImp(
        mut PrefilterState prestate,
        Prefilter? prefilter,
        bytes haystack,
        mut int at,
        mut int stateId,
    ) -> Match? {
        while at < haystack.length {
            if prefilter? as pre {
                if prestate.isEffective(at) and stateId == self.startState() {
                    var c = next(prestate, pre, haystack, at).intoOption()
                    if c? as i {
                        at = i
                    } else {
                        return null
                    }
                }
            }
            # CORRECTNESS: next_state is correct for all possible u8 values,
            # so the only thing we're concerned about is the validity of
            # `state_id`. `state_id` either comes from the caller (in which
            # case, we assume it is correct), or it comes from the return
            # value of next_state, which is guaranteed to be correct.
            stateId = self.nextStateNoFail(stateId, haystack[at])
            at++
            # This routine always quits immediately after seeing a
            # match, and since dead states can only come after seeing
            # a match, seeing a dead state here is impossible. (Unless
            # we have an anchored automaton, in which case, dead states
            # are used to stop a search.)
            assert stateId != DEAD_ID or self.anchored()

            if self.isMatchOrDeadState(stateId) {
                if stateId == DEAD_ID {
                    return null
                } else {
                    self.getMatch(stateId, 0, at)
                }
            }
        }
        return null
    }

    public method leftmostFindAtNoState(
        mut PrefilterState prestate,
        bytes haystack,
        int at,
    ) -> Match? {
        if self.prefilter()? as pre {
            return self.leftmostFindAtNoStateImp(
                prestate,
                pre,
                haystack,
                at,
            )
        } else {
            return self.leftmostFindAtNoStateImp(prestate, null, haystack, at)
        }
    }

    public method leftmostFindAtNoStateImp(
        mut PrefilterState prestate,
        Prefilter? prefilter,
        bytes haystack,
        mut int at,
    ) -> Match? {
        assert self.matchKind().isLeftmost()
        return null if self.anchored() and at > 0

        if prefilter? as pre {
            assert not self.anchored()
            if not pre.reportsFalsePositives() {
                return switch pre.nextCandidate(prestate, haystack, at) {
                    case Candidate.None => null
                    case Candidate.Match as m => m
                    case Candidate.PossibleStartOfMatch => raise NotImplemented()
                }
            }
        }

        mut var stateId = self.startState()
        mut var lastMatch = self.getMatch(stateId, 0, at)
        while at < haystack.length {
            if prefilter? as pre {
                if prestate.isEffective(at) and stateId == self.startState() {
                    switch next(prestate, pre, haystack, at) {
                        case Candidate.None {
                            return null
                        }
                        case Candidate.Match as m {
                            return m
                        }
                        case Candidate.PossibleStartOfMatch as i {
                            at = i
                        }
                    }
                }
            }
            # CORRECTNESS: next_state is correct for all possible u8 values,
            # so the only thing we're concerned about is the validity of
            # `state_id`. `state_id` either comes from the caller (in which
            # case, we assume it is correct), or it comes from the return
            # value of next_state, which is guaranteed to be correct.
            stateId = self.nextStateNoFail(stateId, haystack[at])
            at++
            if self.isMatchOrDeadState(stateId) {
                if stateId == DEAD_ID {
                    return lastMatch
                }
                lastMatch = self.getMatch(stateId, 0, at)
            }
        }
        return lastMatch
    }


    public method overlappingFindAt(
        mut PrefilterState prestate,
        bytes haystack,
        int at,
        mut IntRef stateId,
        mut IntRef matchIndex,
    ) -> Match? {
        return null if self.anchored() and at > 0 and stateId == self.startState()

        var matchCount = self.matchCount(int(stateId))
        if int(matchIndex) < matchCount {
            var result = self.getMatch(int(stateId), int(matchIndex), at)
            assert result? as "must be a match"
            matchIndex.inc()
            return result
        }

        matchIndex.set(0)
        if self.standardFindAt(prestate, haystack, at, int(stateId))? as m {
            matchIndex.set(0)
            return m
        } else {
            return null
        }
    }

    public method earliestFindAt(
        mut PrefilterState prestate,
        bytes haystack,
        int at,
        mut IntRef stateId,
    ) -> Match? {
        if stateId == self.startState() {
            return null if self.anchored() and at > 0

            if self.getMatch(int(stateId), 0, at)? as m {
                return m
            }
        }
        return self.standardFindAt(prestate, haystack, at, int(stateId))
    }

    public method findAtNoState(
        PrefilterState prestate,
        bytes haystack,
        int at,
    ) -> Match? {
        switch self.matchKind() {
            case MatchKind.STANDARD {
                mut var state = self.startState()
                return self.earliestFindAt(prestate, haystack, at, IntRef(state))
            }
            case MatchKind.LEFTMOST_FIRST {
                return self.leftmostFindAtNoState(prestate, haystack, at)
            }
            case MatchKind.LEFTMOST_LONGEST {
                return self.leftmostFindAtNoState(prestate, haystack, at)
            }
            default => raise NotImplemented()
        }
    }
}
