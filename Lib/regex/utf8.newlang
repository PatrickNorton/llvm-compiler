from itertools import all

export Utf8Sequence, Utf8Range, Utf8Sequences, nextUtf8

int MAX_UTF8_BYTES = 4

func nextUtf8(bytes text, int i) -> int {
    return i + 1 if not text.get(i)?
    var b = text[i]
    if b <= 0x7F {
        return i + 1
    } elif b <= 0b110_11111 {
        return i + 2
    } elif b <= 0b1110_1111 {
        return i + 3
    } else {
        return i + 4
    }
}

const union Utf8Sequence {
    Utf8Range One
    tuple[Utf8Range, Utf8Range] Two
    tuple[Utf8Range, Utf8Range, Utf8Range] Three
    tuple[Utf8Range, Utf8Range, Utf8Range, Utf8Range] Four

    public property int length {
        get {
            return switch self {
                case Utf8Sequence.One => 1
                case Utf8Sequence.Two => 2
                case Utf8Sequence.Three => 3
                case Utf8Sequence.Four => 4
            }
        }
    }

    static method fromEncodedRange(bytes start, bytes end) -> cls {
        assert start.length == end.length
        return switch start.length {
            case 2 => Utf8Sequence.Two(
                (
                    Utf8Range(start[0], end[0]),
                    Utf8Range(start[1], end[1]),
                )
            )
            case 3 => Utf8Sequence.Three(
                (
                    Utf8Range(start[0], end[0]),
                    Utf8Range(start[1], end[1]),
                    Utf8Range(start[2], end[2]),
                )
            )
            case 4 => Utf8Sequence.Four(
                (
                    Utf8Range(start[0], end[0]),
                    Utf8Range(start[1], end[1]),
                    Utf8Range(start[2], end[2]),
                    Utf8Range(start[3], end[3])
                )
            )
            default => raise NotImplemented() # raise ValueError(f"invalid encoded length: {n}")
        }
    }

    public operator iter -> Utf8Range {
        switch self {
            case Utf8Sequence.One as r {
                yield r
            }
            case Utf8Sequence.Two as r {
                yield r.0
                yield r.1
            }
            case Utf8Sequence.Three as r {
                yield r.0
                yield r.1
                yield r.2
            }
            case Utf8Sequence.Four as r {
                yield r.0
                yield r.1
                yield r.2
                yield r.3
            }
        }
    }

    public operator reversed -> Utf8Range {
        switch self {
            case Utf8Sequence.One as r {
                yield r
            }
            case Utf8Sequence.Two as r {
                yield r.1
                yield r.0
            }
            case Utf8Sequence.Three as r {
                yield r.2
                yield r.1
                yield r.0
            }
            case Utf8Sequence.Four as r {
                yield r.3
                yield r.2
                yield r.1
                yield r.0
            }
        }
    }

    public method matches(bytes val) -> bool {
        return false if val.length < self.length

        for var b, var r in val, self {  # FIXME: Use all() & a generator
            return false if not r.matches(b)
        }
        return true
    }

    public method reverse() -> Utf8Sequence {
        return switch self {
            case Utf8Sequence.One => self
            case Utf8Sequence.Two as r => Utf8Sequence.Two((r.1, r.0))
            case Utf8Sequence.Three as r => Utf8Sequence.Three((r.2, r.1, r.0))
            case Utf8Sequence.Four as r => Utf8Sequence.Four((r.3, r.2, r.1, r.0))
        }
    }

    public method asList() -> list[Utf8Range] {
        return switch self {
            case Utf8Sequence.One as r => [r]
            case Utf8Sequence.Two as r => [r.0, r.1]
            case Utf8Sequence.Three as r => [r.0, r.1, r.2]
            case Utf8Sequence.Four as r => [r.0, r.1, r.2, r.3]
        }
    }
}

$derive(repr, \==)
const class Utf8Range {
    public int start
    public int end

    public operator new(int start, int end) {
        assert start in [0:256] and end in [0:256]
        self.start = start
        self.end = end
    }

    public method matches(int b) -> bool {
        return b in [self.start:self.end]
    }
}

class Utf8Sequences {
    final list[ScalarRange] rangeStack

    public operator new(char start, char end) {
        self.rangeStack = [ScalarRange(int(start), int(end))]
    }

    public operator iter -> Utf8Sequence {
        final var ranges = self.rangeStack[:]
        while ranges.pop()? as r {
            if self.iterInner(r, ranges)? as seq {
                yield seq
            }
        }
    }

    private method iterInner(ScalarRange scalar, mut list[ScalarRange] rangeStack) -> Utf8Sequence? {
        mref var r = scalar
        while true {
            if r.split()? as pair {
                rangeStack.add(pair.1)
                r = pair.0
                continue
            }
            continue if not r.isValid()
            for var i in [1:MAX_UTF8_BYTES] {
                var max = maxScalarValue(i)
                if max in r {
                    rangeStack.add(ScalarRange(max + 1, r.end))
                    r = ScalarRange(r.start, max)
                    break
                }
            } nobreak {
                if r.asAscii()? as asciiRange {
                    return Utf8Sequence.One(asciiRange)
                }
                for var i in [1:MAX_UTF8_BYTES] {
                    var m = (1 << (6 * i)) - 1
                    var notM = (1 << 32) - 1 - m
                    if (r.start & notM) != (r.end & notM) {
                        if (r.start & m) != 0 {
                            rangeStack.add(ScalarRange((r.start | m) + 1, r.end))
                            r = ScalarRange(r.start, r.start | m)
                            break
                        }
                        if (r.end & m) != m {
                            rangeStack.add(ScalarRange(r.end & notM, r.end))
                            r = ScalarRange(r.start, (r.end & notM) - 1)
                            break
                        }
                    }
                } nobreak {
                    var start, var end = r.encode()
                    return Utf8Sequence.fromEncodedRange(start, end)
                }
            }
        }
    }

    public mut method reset(char start, char end) {
        self.rangeStack.clear()
        self.rangeStack.add(ScalarRange(int(start), int(end)))
    }
}

class ScalarRange {
    int start
    int end

    public operator new(int start, int end) {
        self.start = start
        self.end = end
    }

    public operator in (int value) {
        return value in [self.start:self.end]
    }

    public operator repr {
        return f"ScalarRange\{start = {self.start !#x}, end = {self.end !#x}\}"
    }

    method split() -> tuple[cls, cls]? {
        if self.start < 0xE000 and self.end > 0xD7FF {
           var s1 = ScalarRange(self.start, 0xD7FF)
           var s2 = ScalarRange(0xE000, self.end)
           return (s1, s2)
        } else {
            return null
        }
    }

    method isValid() -> bool {
        return self.start <= self.end
    }

    method asAscii() -> Utf8Range? {
        if self.isAscii() {
            return Utf8Range(self.start, self.end)
        } else {
            return null
        }
    }

    method isAscii() -> bool {
        return self.isValid() and self.end <= 0x7f
    }

    method encode() -> bytes, bytes {
        return char(self.start).encode("UTF-8"), char(self.end).encode("UTF-8")
    }
}

func maxScalarValue(int byteCount) -> int {
    return switch byteCount {
        case 1 => 0x007F
        case 2 => 0x07FF
        case 3 => 0xFFFF
        case 4 => 0x10FFFF
        default => raise ValueError("invalid UTF-8 byte sequence size")
    }
}

# Commented-out tests are there b/c they take a while to execute

$cfg(test)
func neverAcceptsSurrogate(char start, char end) {
    for var cp in [0xD800:0xE000] {
        var buf = encodeSurrogate(cp)
        for var r in Utf8Sequences(start, end) {
            assert not r.matches(buf) as f"Sequence ({start !X}, {end !X}) contains range {r !r}, which matches surrogate code point {cp !X} with encoded bytes {buf !r}"
        }
    }
}

$cfg(test)
func encodeSurrogate(int cp) -> bytes {
    var TAG_CONT = 0b1000_0000
    var TAG_THREE_B = 0b1110_0000

    assert 0xD800 <= cp and cp < 0xE000
    mut var dst = "\0\0\0".encode("UTF-8")
    dst[0] = (cp >> 12 & 0x0F) | TAG_THREE_B
    dst[1] = (cp >> 6 & 0x3F) | TAG_CONT
    dst[2] = (cp & 0x3F) | TAG_CONT
    return dst
}

# $test
func codepointsNoSurrogates() {
    neverAcceptsSurrogate(c'\0', c'\uFFFF')
    neverAcceptsSurrogate(c'\0', c'\U0010FFFF')
    neverAcceptsSurrogate(c'\0', c'\U0010FFFE')
    neverAcceptsSurrogate(c'\x80', c'\U0010FFFF')
    neverAcceptsSurrogate(c'\uD7FF', c'\uE000')
}

# $test
func singleCodepointOneSequence() {
    for var i in [0x0:0x10FFFF + 1] {
        if char.fromInt(i)? as c {
            var seqs = list[Utf8Sequence](Utf8Sequences(c, c))
            assert seqs.length == 1
        }
    }
}

$test
func bmp() {
    var seqs = list[Utf8Sequence](Utf8Sequences(c'\0', c'\uFFFF'))
    var expected = [
            Utf8Sequence.One(Utf8Range(0x0, 0x7F)),
            Utf8Sequence.Two((Utf8Range(0xC2, 0xDF), Utf8Range(0x80, 0xBF))),
            Utf8Sequence.Three((
                    Utf8Range(0xE0, 0xE0),
                    Utf8Range(0xA0, 0xBF),
                    Utf8Range(0x80, 0xBF),
                )),
            Utf8Sequence.Three((
                    Utf8Range(0xE1, 0xEC),
                    Utf8Range(0x80, 0xBF),
                    Utf8Range(0x80, 0xBF),
                )),
            Utf8Sequence.Three((
                    Utf8Range(0xED, 0xED),
                    Utf8Range(0x80, 0x9F),
                    Utf8Range(0x80, 0xBF),
                )),
            Utf8Sequence.Three((
                    Utf8Range(0xEE, 0xEF),
                    Utf8Range(0x80, 0xBF),
                    Utf8Range(0x80, 0xBF),
                )),
        ]
    assert (
        seqs == [
            Utf8Sequence.One(Utf8Range(0x0, 0x7F)),
            Utf8Sequence.Two((Utf8Range(0xC2, 0xDF), Utf8Range(0x80, 0xBF))),
            Utf8Sequence.Three((
                    Utf8Range(0xE0, 0xE0),
                    Utf8Range(0xA0, 0xBF),
                    Utf8Range(0x80, 0xBF),
                )),
            Utf8Sequence.Three((
                    Utf8Range(0xE1, 0xEC),
                    Utf8Range(0x80, 0xBF),
                    Utf8Range(0x80, 0xBF),
                )),
            Utf8Sequence.Three((
                    Utf8Range(0xED, 0xED),
                    Utf8Range(0x80, 0x9F),
                    Utf8Range(0x80, 0xBF),
                )),
            Utf8Sequence.Three((
                    Utf8Range(0xEE, 0xEF),
                    Utf8Range(0x80, 0xBF),
                    Utf8Range(0x80, 0xBF),
                )),
        ]
    ) as f"Utf8Sequence unequal: {seqs}\nExpected Utf8Sequence: {expected}"
}

$test
func reverse() {
    mut var s0 = Utf8Sequence.One(Utf8Range(0xA, 0xB))
    s0 = s0.reverse()
    assert s0.asList() == [Utf8Range(0xA, 0xB)] as f"Invalid: {s0.asList()} != {[Utf8Range(0xA, 0xB)]}"

    mut var s1 = Utf8Sequence.Two((Utf8Range(0xA, 0xB), Utf8Range(0xB, 0xC)))
    s1 = s1.reverse()
    assert s1.asList() == [Utf8Range(0xB, 0xC), Utf8Range(0xA, 0xB)] as f"Invalid: {s1.asList()}"

    mut var s2 = Utf8Sequence.Three((Utf8Range(0xA, 0xB), Utf8Range(0xB, 0xC), Utf8Range(0xC, 0xD)))
    s2 = s2.reverse()
    assert s2.asList() == [Utf8Range(0xC, 0xD), Utf8Range(0xB, 0xC), Utf8Range(0xA, 0xB)] as f"Invalid: {s2.asList()}"

    mut var s3 = Utf8Sequence.Four((
            Utf8Range(0xA, 0xB),
            Utf8Range(0xB, 0xC),
            Utf8Range(0xC, 0xD),
            Utf8Range(0xD, 0xE),
        ))
    s3 = s3.reverse()
    assert s3.asList() == [
        Utf8Range(0xD, 0xE),
        Utf8Range(0xC, 0xD),
        Utf8Range(0xB, 0xC),
        Utf8Range(0xA, 0xB),
    ] as f"Invalid: {s3.asList()}"
}
